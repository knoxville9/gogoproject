// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/link": {
            "post": {
                "description": "根据提交的字符串，来查找关系链，比如: 15,14,13 查出来的关系就是特约，省级，市级，但是市级的下一级没有指定的话，就是找出所有可能\n最短可查 2 层关系，最长可查 10 层关系\n参数 例 : 12,12     以第一个开始",
                "summary": "查找关系链",
                "parameters": [
                    {
                        "type": "string",
                        "description": "id",
                        "name": "id",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.MemberList"
                        }
                    }
                }
            }
        },
        "/query": {
            "get": {
                "description": "根据t_userid一直找到公司",
                "summary": "查找推荐关系",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.MemberList"
                        }
                    }
                }
            }
        },
        "/team": {
            "get": {
                "description": "根据自己的role，查找团队成员",
                "summary": "查看团队",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.MemberList"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "domain.MemberList": {
            "type": "object",
            "required": [
                "id"
            ],
            "properties": {
                "StoreMoney": {
                    "description": "StoreMoney 代理库存余额",
                    "type": "number"
                },
                "id": {
                    "description": "MemberListID 主键id",
                    "type": "integer"
                },
                "isactive": {
                    "description": "Isactive 0，未激活，1激活",
                    "type": "integer"
                },
                "isblack": {
                    "description": "Isblack 是否黑名单",
                    "type": "integer"
                },
                "p_role": {
                    "description": "PRole 上级角色",
                    "type": "integer"
                },
                "p_username": {
                    "description": "PUsername 上级姓名",
                    "type": "string"
                },
                "parentid": {
                    "description": "Parentid 上级ID",
                    "type": "integer"
                },
                "realname": {
                    "description": "Realname 姓名",
                    "type": "string"
                },
                "role": {
                    "description": "Role 用户角色",
                    "type": "integer"
                },
                "role10": {
                    "description": "Role10 官方",
                    "type": "integer"
                },
                "role11": {
                    "description": "Role11 荣誉官方",
                    "type": "integer"
                },
                "role12": {
                    "description": "Role12 总代",
                    "type": "integer"
                },
                "role13": {
                    "description": "Role13 省级",
                    "type": "integer"
                },
                "role14": {
                    "description": "Role14 市级",
                    "type": "integer"
                },
                "role15": {
                    "description": "Role15 特约",
                    "type": "integer"
                },
                "role16": {
                    "description": "Role16 无",
                    "type": "integer"
                },
                "t_role": {
                    "description": "TRole 推荐人角色",
                    "type": "integer"
                },
                "t_userid": {
                    "description": "TUserid 推荐人ID",
                    "type": "integer"
                },
                "t_username": {
                    "description": "TUsername 推荐人姓名",
                    "type": "string"
                },
                "user_status": {
                    "description": "UserStatus 用户状态（0未处理1拒绝2通过）",
                    "type": "integer"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "",
	Host:        "",
	BasePath:    "",
	Schemes:     []string{},
	Title:       "",
	Description: "",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
