package main

import (
	"encoding/json"
	"fmt"
	"golang.org/x/sync/errgroup"
	"io/ioutil"
	"net/http"
	"net/url"
	"strconv"
	"strings"
)

func main() {

	group := errgroup.Group{}

	for i := 0; i < 3; i++ {
		group.Go(func() error {

			for {

				var o Order

				order := saveOrder(10101)

				json.Unmarshal(order, &o)

				s := o.Data[0].ID
				sqpay(10101, s)

				var j AutoGenerated
				atoi, _ := strconv.Atoi(s)
				post1 := sendPost1(10101, atoi)
				json.Unmarshal(post1, &j)

				id := j.Data.ID

				sendPost2(id, 10101)

			}
			return nil
		})

	}
	group.Wait()

}

func sqpay(i int, orderid string) []byte {
	apiUrl := "https://order.ljyh.funwin.cn/apppayrequest/sqpay"
	data := url.Values{}
	data.Set("orderids", orderid)
	data.Set("pay_type", "15")
	data.Set("type", "wxpaypub")

	client := &http.Client{}
	r, _ := http.NewRequest("POST", apiUrl, strings.NewReader(data.Encode())) // URL-encoded payload
	r.Header.Add("Content-Type", "application/x-www-form-urlencoded")
	r.Header.Add("Authorization", "Bearer "+strconv.Itoa(i))

	resp, err := client.Do(r)
	if err != nil {
		fmt.Println(err.Error())
	}
	defer resp.Body.Close()

	body, _ := ioutil.ReadAll(resp.Body)
	fmt.Println(string(body))

	return body

}

func saveOrder(i int) []byte {
	apiUrl := "https://order.ljyh.funwin.cn/appconfirm/saveOrder"
	data := url.Values{}
	data.Set("goods_id", "6659")
	data.Set("amount", "1")
	data.Set("spec_id", "0")
	data.Set("addressid", strconv.Itoa(i+868598))
	data.Set("pay_type", "15")

	client := &http.Client{}
	r, _ := http.NewRequest("POST", apiUrl, strings.NewReader(data.Encode())) // URL-encoded payload
	r.Header.Add("Content-Type", "application/x-www-form-urlencoded")
	r.Header.Add("Authorization", "Bearer "+strconv.Itoa(i))

	resp, err := client.Do(r)
	if err != nil {
		fmt.Println(err.Error())
	}
	defer resp.Body.Close()

	body, _ := ioutil.ReadAll(resp.Body)
	fmt.Println(string(body))

	return body

}

func sendPost1(i, conditionId int) []byte {
	apiUrl := "https://user.ljyh.funwin.cn/TakeAward/takePartAward"
	data := url.Values{}
	data.Set("take_id", "26")
	data.Set("type", "1")
	itoa := strconv.Itoa(conditionId)
	data.Set("conditionId", itoa)

	client := &http.Client{}
	r, _ := http.NewRequest("POST", apiUrl, strings.NewReader(data.Encode())) // URL-encoded payload
	r.Header.Add("Content-Type", "application/x-www-form-urlencoded")
	r.Header.Add("Authorization", "Bearer "+strconv.Itoa(i))

	resp, err := client.Do(r)
	if err != nil {
		fmt.Println(err.Error())
	}
	defer resp.Body.Close()

	body, _ := ioutil.ReadAll(resp.Body)
	fmt.Println(string(body))

	return body

}

func sendPost2(id string, i int) {
	apiUrl := "https://user.ljyh.funwin.cn/TakeAward/drawTake"
	data := url.Values{}
	data.Set("conditionId", id)

	client := &http.Client{}
	r, _ := http.NewRequest("POST", apiUrl, strings.NewReader(data.Encode())) // URL-encoded payload
	r.Header.Add("Content-Type", "application/x-www-form-urlencoded")
	r.Header.Add("Authorization", "Bearer "+strconv.Itoa(i))

	resp, err := client.Do(r)
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	defer resp.Body.Close()

	body, _ := ioutil.ReadAll(resp.Body)
	fmt.Println(string(body))

}

type AutoGenerated struct {
	ErrorCode int    `json:"error_code"`
	Message   string `json:"message"`
	Data      struct {
		ID           string        `json:"id"`
		Type         string        `json:"type"`
		TakeID       string        `json:"take_id"`
		ConditionID  string        `json:"condition_id"`
		TakeType     string        `json:"take_type"`
		ShareIndex   string        `json:"share_index"`
		ShareMax     string        `json:"share_max"`
		Status       string        `json:"status"`
		HelpUserInfo []interface{} `json:"help_userInfo"`
		TakeInfo     struct {
			Title string `json:"title"`
			Thumb string `json:"thumb"`
			H5URL struct {
				UserName string `json:"userName"`
				Path     string `json:"path"`
				H5URL    string `json:"h5_url"`
			} `json:"h5_url"`
		} `json:"take_info"`
	} `json:"data"`
}

type Order struct {
	Data []struct {
		MemberID          string      `json:"member_id"`
		OrderSn           string      `json:"order_sn"`
		SupplierID        string      `json:"supplier_id"`
		AgentID           string      `json:"agent_id"`
		Role              string      `json:"role"`
		Role3             string      `json:"role3"`
		Role5             string      `json:"role5"`
		Role7             string      `json:"role7"`
		Role9             string      `json:"role9"`
		Status            int         `json:"status"`
		PayType           string      `json:"pay_type"`
		Price             float64     `json:"price"`
		PayPrice          float64     `json:"pay_price"`
		YPayPrice         float64     `json:"y_pay_price"`
		PayOpenid         interface{} `json:"pay_openid"`
		Remark            string      `json:"remark"`
		IsInvite          string      `json:"is_invite"`
		ManjianMoney      string      `json:"manjian_money"`
		OrderTickID       int         `json:"order_tick_id"`
		OrderTickDiscount int         `json:"order_tick_discount"`
		CashMoneyPay      float64     `json:"cash_money_pay"`
		Yunfei            string      `json:"yunfei"`
		IsOriginalBuy     int         `json:"is_original_buy"`
		ID                string      `json:"id"`
	} `json:"data"`
}
